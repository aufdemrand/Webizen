Phone Number:
  type: inline-object
  # Since inline-objects will eventually be rendered to the client's DOM as a custom element, the prefix
  # must contain a hyphen to comply with W3C Web Component standards. Since custom elements are still considered 
  # 'draft', to maintain as much browser compatibility as possible, 'document-register-element.js' is required.
  prefix: 'us-phone-number'


  # Inline-objects use html attributes to form a custom html-tag for any client-side handlers
  # to use when manipulating or executing functions from the client.
  attribute-meta:

    'data':
      type: text
      include: always
      desc: 'The raw data provided for parsing the phone number.'


  # Inline-objects utilize functions to perform various default actions on the object (such as construct), 
  # and allow for custom functions to suit whatever processing is required on the object instance.
  # All functions have available the 'obj' reference, the instance of the particular inline-object
  # and the 'args' reference, a groovy map of the arguments supplied with the call.
  # Calling other functions within the object's scope is easy too, just use obj.call('function-name')
  # or when specifying arguments, use obj.call('function-name', ['arg':'value',...])
  function-meta:

    # Standard method when a new instance is being constructed. It's up to this method to parse the 
    # args supplied (as a groovy map) and store attributes for use in renderings and other functions.
    'construct':
        type: 'groovy'
        code: |
            // store raw data since this object will allow manipulations from the user and we'll
            // supply the user with the original data (pre-parsed) to work with
            println('incoming data!')
            obj.attribute['data'] = args['data']
            // parse phone number (from given data)
            def stripped = ''
            def data = args['data'];
            if (data == null) data = '';
            for (def d in data.getChars()) { if (d.isDigit()) stripped += d; }
            // requires at least 10 numbers to form area-code, exchange, and line-number
            if (stripped.length() >= 10) {
                obj.attribute['area-code'] = stripped[0..2]
                obj.attribute['exchange'] = stripped[3..5]
                obj.attribute['line-number'] = stripped[6..9]
            }
            // set extension (if applicable)
            if (stripped.length() > 10) {
                obj.attribute['extension'] = stripped[10..(stripped.length() - 1)]
            }


    # Custom function to validate the phone number.
    'is-valid':
        type: 'groovy'
        code: |
            // just use some simple groovy regex operators to validate the required attributes
            if (obj.attribute['area-code'] ==~ /\d{3}/
                && obj.attribute['exchange'] ==~ /\d{3}/
                && obj.attribute['line-number'] ==~ /\d{4}/)
                return true;
            else 
                return false;

    # Custom function to write out a pretty-text version of the phone number
    # that will be used in the rendering methods.
    'write-out':
        type: 'groovy'
        code: |
            if (obj.call('is-valid'))
            return '(' + obj.attribute['area-code'] + ') ' +
              obj.attribute['exchange'] + '-' +
              obj.attribute['line-number'] +
              (obj.attribute['extension'] != null ? ' ex. ' + obj.attribute['extension'] : '')
            else return obj.attribute['data']


  # Inline-objects can render data (or results of an action) to the client as ghtml, html with ${groovy-strings},
  # or as a gson, a ['key':'value'] groovy map automatically converted into a json object to the client.
  rendering-meta:

    # Output of a 'ghtml' rendering will automatically include the custom-tag, as defined by the inline-object's prefix,
    # with attributes marked as 'include:true'. The code of this node is used to generate the interior of the tag.
    'standard':
        type: 'ghtml'
        code: |
            ${obj.call('write-out')}

    'readonly':
        type: 'ghtml'
        code: |
            ${obj.call('write-out')}



  handler-meta:

    'on-attached':
        type: 'grooscript'
        code: |
            def el = this;
            if (el.textContent == '') { 
                el.render();
              }
              


    'on-created':
        type: 'javascript'
        code: |
            console.log('created!');


    'on-detached':
        type: 'javascript'
        code: |
            console.log('detached!');


    'on-attribute-changed':
        type: 'javascript'
        code: |
            console.log('attribute changed!');


    'on-attribute-created':
        type: 'grooscript'
        code: |
            int x = 1
            def m = ['test':'testing']
            console.log(m)
            $('body').css('background-color','red')
            console.log("attribute created! ${x}")


    'on-attribute-removed':
        type: 'javascript'
        code: |
            console.log('attribute removed!');

    'on-document-ready':
        type: 'grooscript'
        code: |
            $('body').on('click', 'us-phone-number', {
                if (!$(this).hasClass('focused')) {
                    $(this).addClass('focused')
                    $(this).html('<input type=text value="' + $(this).attr('data') + '">')
                    $(this).find('input').focus()
                }
            })

            $('body').on('blur', 'us-phone-number>input', {
                $(this).parent().attr('data', $(this).val())
                $(this).parent()[0].render()
                $(this).parent().removeClass('focused')
            });
