Phone Number:

  type: inline-object
  # Since inline-objects will eventually be rendered to the client's DOM as a custom element, the prefix
  # must contain a hyphen to comply with W3C Web Component standards. Since custom elements are still considered 
  # 'draft', to maintain as much browser compatibility as possible, 'document-register-element.js' is required.
  prefix: 'us-phone-number'


  # Inline-objects use html attributes to form a custom html-tag for any client-side handlers
  # to use when manipulating or executing functions from the client.
  attribute-meta:

    'data':
        type: text
        include: always
        desc: 'The raw data provided for parsing the phone number.'


  # Inline-objects utilize functions to perform various default actions on the object (such as construct), 
  # and allow for custom functions to suit whatever processing is required on the object instance.
  # All functions have available the 'obj' reference, the instance of the particular inline-object
  # and the 'args' reference, a groovy map of the arguments supplied with the call.
  # Calling other functions within the object's scope is easy too, just use obj.call('function-name')
  # or when specifying arguments, use obj.call('function-name', ['arg':'value',...])
  function-meta:

    # Standard method when a new instance is being constructed. It's up to this method to parse the 
    # args supplied (as a groovy map) and store attributes for use in renderings and other functions.
    'construct':
        type: 'groovy'
        code: |
            // store raw data since this object will allow manipulations from the user and we'll
            // supply the user with the original data (pre-parsed) to work with
            obj.attribute['data'] = args['data']
            // parse phone number (from data attribute)
            def stripped = ''
            def data = args['data'];
            if (data == null) data = '';
            for (def d in data.getChars()) { if (d.isDigit()) stripped += d; }
            // requires at least 10 numbers to form area-code, exchange, and line-number
            if (stripped.length() >= 10) {
                obj.attribute['area-code'] = stripped[0..2]
                obj.attribute['exchange'] = stripped[3..5]
                obj.attribute['line-number'] = stripped[6..9]
            }
            // set extension (if applicable)
            if (stripped.length() > 10) {
                obj.attribute['extension'] = stripped[10..(stripped.length() - 1)]
            }
            obj.attribute['tabindex'] = 0


    # Custom function to validate the phone number.
    'is-valid':
        type: 'groovy'
        code: |
            // just use some simple groovy regex operators to validate the required attributes
            if (obj.attribute['area-code'] ==~ /\d{3}/
                && obj.attribute['exchange'] ==~ /\d{3}/
                && obj.attribute['line-number'] ==~ /\d{4}/)
                return true;
            else 
                return false;


    # Custom function to write out a pretty-text version of the phone number
    # that will be used in the rendering methods.
    'pretty-out':
        type: 'groovy'
        code: |
            if (obj.call('is-valid'))
            return '(' + obj.attribute['area-code'] + ') ' +
              obj.attribute['exchange'] + '-' +
              obj.attribute['line-number'] +
              (obj.attribute['extension'] != null ? ' ex. ' + obj.attribute['extension'] : '')
            else return obj.attribute['data']



  # Inline-objects can render data (or results of an action) to the client as ghtml, html with ${groovy-strings},
  # or as a gson, a ['key':'value'] groovy map automatically converted into a json object to the client.
  rendering-meta:

    # Output of a 'ghtml' rendering will automatically include the custom-tag, as defined by the inline-object's prefix,
    # with attributes marked as 'include:true'. The code of this node is used to generate the interior of the tag.
    'standard':
        type: 'ghtml'
        code: |
            ${ obj.call('pretty-out') }

    'focused':
        type: ghtml
        code: |
            (<input size=3 scope=area-code type=text value="${ obj.attribute['area-code'] }">) 
            <input size=3 scope=exchange type=text value="${ obj.attribute['exchange'] }">-<input size=4 scope=line-number type=text value="${ obj.attribute['line-number'] }">
            <span action=ok><svg version="1.2" baseProfile="tiny" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path d="M16.972 6.251c-.967-.538-2.185-.188-2.72.777l-3.713 6.682-2.125-2.125c-.781-.781-2.047-.781-2.828 0-.781.781-.781 2.047 0 2.828l4 4c.378.379.888.587 1.414.587l.277-.02c.621-.087 1.166-.46 1.471-1.009l5-9c.537-.966.189-2.183-.776-2.72z"/></svg>
            </span>


  handler-meta:

    'on-created':
        type: 'grooscript'
        code: |
            this.render();


    'on-document-ready':
        type: 'grooscript'
        code: |
            $('body').on('click', 'us-phone-number', {
                def obj = this;
                // If not already focused, call render('focused')
                if (this.getState() != 'focused') {
                    this.render('focused').then( {
                        $(obj).find('input')[0].focus()
                    });
                }
            });

            $('body').on('blur', 'us-phone-number>input', {
                $(this).parent().attr('data',$(this).parent().text())
                $(this).parent()[0].render('standard')
            });



  style-meta:

    'default':
        type: gcss
        code: |
            us-phone-number {
                min-width: 200px;
                height: 34px;
                font-family: 'Nova Mono';
                font-weight: 600;
                background-color: whitesmoke;
                display: inline-block;
                padding-top: 1px;
                padding-left: 15px;
                padding-right: 15px;
                border: 1px solid darkgray;
                border-bottom: 2px solid darkgray;
                border-radius: 2px;
            }


            us-phone-number>[scope] {
                font-family: 'Nova Mono';
                font-weight: 600;
                border: none;
                background-color: transparent;
                padding: 7px;
                padding-top: 5px;
                padding-left: 5px;
                padding-right: 0px;
                display: inline-block;
                font-size: 17px;
                top: 0px;
                outline: none;
                position: relative;
            }

            us-phone-number>[action] {
                display: inline-block;
                top: 4px;
                padding-left: 12px;
                position: relative;
                float: right;
            }

            us-phone-number>[action]>svg {
                fill: dimgray;
            }

            us-phone-number>[action]>svg:hover {
                fill: cornflowerblue;
                cursor: pointer;
            }
